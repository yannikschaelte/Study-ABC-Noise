{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How things go wrong for a stochastic MJP model of gene expression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f596681c6a0>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from study_abc_noise.model import MRNATranscription1dModelVars as ModelVars\n",
    "import pyabc\n",
    "import pickle\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "n_t = 10\n",
    "mv = ModelVars(n_t=n_t, noise_model='poisson')\n",
    "\n",
    "model = mv.get_model()\n",
    "model_noisy = mv.get_model_noisy()\n",
    "prior = mv.get_prior()\n",
    "\n",
    "def get_data():\n",
    "    try:\n",
    "        data_nonoise, data = pickle.load(open(f\"data_{n_t}.dat\", 'rb'))\n",
    "    except:\n",
    "        data_nonoise = model(mv.p_true)\n",
    "        data = mv.add_noise_to_data(data_nonoise)\n",
    "        pickle.dump((data_nonoise, data), open(f\"data_{n_t}.dat\", 'wb'))\n",
    "    return data_nonoise, data\n",
    "\n",
    "data_nonoise, data = get_data()\n",
    "\n",
    "distance = mv.get_distance()\n",
    "kernel = mv.get_kernel()\n",
    "temperature = pyabc.Temperature()\n",
    "acceptor = pyabc.StochasticAcceptor()\n",
    "\n",
    "plt.plot(data_nonoise['t'], data_nonoise['mrna'], 'x-')\n",
    "plt.plot(data['t'], data['mrna'], 'x-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:History:Start <ABCSMC(id=2, start_time=2020-01-08 19:42:49.936002, end_time=None)>\n",
      "INFO:ABC:Calibration sample before t=0.\n",
      "INFO:Epsilon:initial epsilon is 56031.49999999987\n",
      "INFO:ABC:t: 0, eps: 56031.49999999987.\n",
      "INFO:ABC:Acceptance rate: 100 / 165 = 6.0606e-01, ESS=1.0000e+02.\n",
      "INFO:ABC:t: 1, eps: 19253.5.\n",
      "INFO:ABC:Acceptance rate: 100 / 193 = 5.1813e-01, ESS=9.8107e+01.\n",
      "INFO:ABC:t: 2, eps: 7442.271259214019.\n",
      "INFO:ABC:Acceptance rate: 100 / 225 = 4.4444e-01, ESS=9.9748e+01.\n",
      "INFO:ABC:t: 3, eps: 4274.874106907801.\n",
      "INFO:ABC:Acceptance rate: 100 / 211 = 4.7393e-01, ESS=9.5691e+01.\n",
      "INFO:ABC:t: 4, eps: 3258.2763690947863.\n",
      "INFO:ABC:Acceptance rate: 100 / 255 = 3.9216e-01, ESS=8.5309e+01.\n",
      "INFO:ABC:t: 5, eps: 2516.480060011911.\n",
      "INFO:ABC:Acceptance rate: 100 / 452 = 2.2124e-01, ESS=8.6336e+01.\n",
      "INFO:ABC:t: 6, eps: 2108.914930279476.\n",
      "Process Process-97:\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "Process Process-99:\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "Process Process-100:\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "Process Process-98:\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-11f73cfe54a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mabc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mABCSMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprior\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"sqlite:///h_incorrect_poisson_1d.db\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_nr_populations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/pyabc/pyabc/smc.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, minimum_epsilon, max_nr_populations, min_acceptance_rate)\u001b[0m\n\u001b[1;32m    884\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Now submitting population {t}.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m             sample = self.sampler.sample_until_n_accepted(\n\u001b[0;32m--> 886\u001b[0;31m                 pop_size, simulate_one, max_eval)\n\u001b[0m\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m             \u001b[0;31m# check sample health\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/base.py\u001b[0m in \u001b[0;36msample_until_n_accepted\u001b[0;34m(self, n, simulate_one, max_eval, all_accepted)\u001b[0m\n\u001b[1;32m    149\u001b[0m     def sample_until_n_accepted(\n\u001b[1;32m    150\u001b[0m             self, n, simulate_one, max_eval=np.inf, all_accepted=False):\n\u001b[0;32m--> 151\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimulate_one\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_eval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mall_accepted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_accepted\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mn\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mok\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m             \u001b[0;31m# this should not happen if the sampler is configured correctly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\u001b[0m in \u001b[0;36msample_until_n_accepted\u001b[0;34m(self, n, simulate_one, max_eval, all_accepted)\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0mn_done\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mn_done\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocesses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m             \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_if_worker_healthy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocesses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mqueue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mval\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mDONE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m                 \u001b[0mn_done\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/multicorebase.py\u001b[0m in \u001b[0;36mget_if_worker_healthy\u001b[0;34m(workers, queue)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m             \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mitem\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/queues.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m                     \u001b[0mtimeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeadline\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonotonic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mpoll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_poll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(object_list, timeout)\u001b[0m\n\u001b[1;32m    918\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    919\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 920\u001b[0;31m                 \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    921\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileobj\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    414\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 415\u001b[0;31m             \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_selector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    416\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 28, in direct\n",
      "    hazards = k * (x ** reactants).prod(axis=1)\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 43, in direct\n",
      "    cdv /= h0\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 44, in direct\n",
      "    index = sample_discrete(cdv)\n",
      "  File \"/home/yannik/ssa/ssa/util.py\", line 96, in sample_discrete\n",
      "    p = np.random.uniform()\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 40, in direct\n",
      "    delta_t = - 1.0 / h0 * np.log(np.random.uniform())\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "abc = pyabc.ABCSMC(model, prior, distance)\n",
    "abc.new(\"sqlite:///h_incorrect_poisson_1d.db\", data)\n",
    "abc.run(max_nr_populations=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:History:Start <ABCSMC(id=1, start_time=2020-01-08 19:35:19.697945, end_time=None)>\n",
      "INFO:ABC:Calibration sample before t=0.\n",
      "DEBUG:Acceptor:pdf_norm=-7.7871e+01 for t=0.\n",
      "INFO:ABC:t: 0, eps: 241.7748661330661.\n",
      "DEBUG:Acceptor:Encountered pd=-7.2867e+01 > c=-7.7871e+01, thus weight=1.0209e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-7.6418e+01 > c=-7.7871e+01, thus weight=1.0060e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-7.1598e+01 > c=-7.7871e+01, thus weight=1.0263e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-7.5016e+01 > c=-7.7871e+01, thus weight=1.0119e+00.\n",
      "INFO:ABC:Acceptance rate: 100 / 284 = 3.5211e-01, ESS=9.9999e+01.\n",
      "DEBUG:Acceptor:pdf_norm=-7.1598e+01 for t=1.\n",
      "INFO:ABC:t: 1, eps: 35.106590648234366.\n",
      "DEBUG:Acceptor:Encountered pd=-7.1434e+01 > c=-7.1598e+01, thus weight=1.0047e+00.\n",
      "INFO:ABC:Acceptance rate: 100 / 446 = 2.2422e-01, ESS=9.8131e+01.\n",
      "DEBUG:Acceptor:pdf_norm=-7.1434e+01 for t=2.\n",
      "INFO:ABC:t: 2, eps: 17.553295324117183.\n",
      "DEBUG:Acceptor:Encountered pd=-7.1427e+01 > c=-7.1434e+01, thus weight=1.0004e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-7.1162e+01 > c=-7.1434e+01, thus weight=1.0156e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-7.0202e+01 > c=-7.1434e+01, thus weight=1.0727e+00.\n",
      "INFO:ABC:Acceptance rate: 100 / 364 = 2.7473e-01, ESS=9.7295e+01.\n",
      "DEBUG:Acceptor:pdf_norm=-7.0202e+01 for t=3.\n",
      "INFO:ABC:t: 3, eps: 8.776647662058592.\n",
      "DEBUG:Acceptor:Encountered pd=-6.9339e+01 > c=-7.0202e+01, thus weight=1.1034e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-6.9063e+01 > c=-7.0202e+01, thus weight=1.1386e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-6.7698e+01 > c=-7.0202e+01, thus weight=1.3301e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-6.8471e+01 > c=-7.0202e+01, thus weight=1.2180e+00.\n",
      "DEBUG:Acceptor:Encountered pd=-6.9715e+01 > c=-7.0202e+01, thus weight=1.0571e+00.\n",
      "INFO:ABC:Acceptance rate: 100 / 495 = 2.0202e-01, ESS=8.9122e+01.\n",
      "DEBUG:Acceptor:pdf_norm=-6.7698e+01 for t=4.\n",
      "INFO:ABC:t: 4, eps: 4.388323831029296.\n",
      "DEBUG:Acceptor:Encountered pd=-6.7322e+01 > c=-6.7698e+01, thus weight=1.0896e+00.\n",
      "Process Process-24:\n",
      "Process Process-22:\n",
      "Process Process-23:\n",
      "Traceback (most recent call last):\n",
      "Process Process-21:\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n",
      "    self.run()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/multiprocessing/process.py\", line 99, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\", line 32, in work\n",
      "    new_sim = simulate_one()\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 594, in simulate_one\n",
      "    weight_function)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/smc.py\", line 679, in _evaluate_proposal\n",
      "    x_0)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 227, in accept\n",
      "    sum_stats_calculator)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 121, in summary_statistics\n",
      "    raw_data = self.sample(pars)\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/pyabc/pyabc/model.py\", line 270, in sample\n",
      "    return self.sample_function(pars)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/Documents/Project8_pyABC_Noise/Study-ABC-Noise/study_abc_noise/model/mrna_transcription.py\", line 73, in model\n",
      "    result = ssa_model.simulate(n_reps=1)\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 31, in direct\n",
      "    cdv = np.cumsum(hazards)\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 48, in direct\n",
      "    x = x + reaction_matrix[index]\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"/home/yannik/ssa/ssa/model.py\", line 90, in simulate\n",
      "    ret = self.engine.execute(tasks)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 55, in execute\n",
      "    ret.append(task.execute())\n",
      "  File \"<__array_function__ internals>\", line 6, in cumsum\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py\", line 2470, in cumsum\n",
      "    return _wrapfunc(a, 'cumsum', axis=axis, dtype=dtype, out=out)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/engine.py\", line 24, in execute\n",
      "    return self.alg(**self.alg_args)\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 43, in direct\n",
      "    cdv /= h0\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py\", line 56, in _wrapfunc\n",
      "    bound = getattr(obj, method, None)\n",
      "KeyboardInterrupt\n",
      "  File \"/home/yannik/ssa/ssa/direct.py\", line 40, in direct\n",
      "    delta_t = - 1.0 / h0 * np.log(np.random.uniform())\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "KeyboardInterrupt\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-03ca63a3e9d5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mabc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mABCSMC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprior\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtemperature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0macceptor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0macceptor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"sqlite:///h_stochastic_acceptor_poisson_1d.db\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/pyabc/pyabc/smc.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, minimum_epsilon, max_nr_populations, min_acceptance_rate)\u001b[0m\n\u001b[1;32m    884\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Now submitting population {t}.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m             sample = self.sampler.sample_until_n_accepted(\n\u001b[0;32m--> 886\u001b[0;31m                 pop_size, simulate_one, max_eval)\n\u001b[0m\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m             \u001b[0;31m# check sample health\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/base.py\u001b[0m in \u001b[0;36msample_until_n_accepted\u001b[0;34m(self, n, simulate_one, max_eval, all_accepted)\u001b[0m\n\u001b[1;32m    149\u001b[0m     def sample_until_n_accepted(\n\u001b[1;32m    150\u001b[0m             self, n, simulate_one, max_eval=np.inf, all_accepted=False):\n\u001b[0;32m--> 151\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimulate_one\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_eval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mall_accepted\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_accepted\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mn\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mok\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m             \u001b[0;31m# this should not happen if the sampler is configured correctly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/multicore_evaluation_parallel.py\u001b[0m in \u001b[0;36msample_until_n_accepted\u001b[0;34m(self, n, simulate_one, max_eval, all_accepted)\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0mn_done\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mn_done\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocesses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m             \u001b[0mval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_if_worker_healthy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocesses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mqueue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mval\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mDONE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m                 \u001b[0mn_done\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/pyabc/pyabc/sampler/multicorebase.py\u001b[0m in \u001b[0;36mget_if_worker_healthy\u001b[0;34m(workers, queue)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m             \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mitem\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/queues.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    102\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m                     \u001b[0mtimeout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeadline\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonotonic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mEmpty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mpoll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_closed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_readable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36m_poll\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_poll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/multiprocessing/connection.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(object_list, timeout)\u001b[0m\n\u001b[1;32m    918\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    919\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 920\u001b[0;31m                 \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    921\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileobj\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevents\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    413\u001b[0m         \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    414\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 415\u001b[0;31m             \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_selector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    416\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "abc = pyabc.ABCSMC(model, prior, kernel, eps=temperature, acceptor=acceptor)\n",
    "abc.new(\"sqlite:///h_stochastic_acceptor_poisson_1d.db\", data)\n",
    "abc.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pyabc\n",
    "%matplotlib inline\n",
    "\n",
    "def plot(h, x, ax, limits, p_true):\n",
    "    for t in range(0, h.max_t + 1):\n",
    "        pyabc.visualization.plot_kde_1d_highlevel(\n",
    "            h, t=t, x=x, xmin=limits[x][0], xmax=limits[x][1], ax=ax,\n",
    "            refval=p_true, label=f\"Iter. {t}\")\n",
    "    ax.legend()\n",
    "    return ax\n",
    "\n",
    "h_incorrect = pyabc.History(\"sqlite:///h_incorrect_poisson_1d.db\")\n",
    "h = pyabc.History(\"sqlite:///h_stochastic_acceptor_poisson_1d.db\")\n",
    "print(h_incorrect.max_t, h.max_t)\n",
    "\n",
    "for p in mv.p_true:\n",
    "    _, ax = plt.subplots()\n",
    "    for h, label in [(h_incorrect, \"Incorrect\"), (h, \"Stochastic acceptor\")]:\n",
    "        pyabc.visualization.plot_kde_1d_highlevel(h, x=p, xmin=mv.limits[p][0], xmax=mv.limits[p][1], ax=ax,\n",
    "                                                 refval=mv.p_true, label=label)\n",
    "    ax.legend()\n",
    "\n",
    "for p in mv.p_true:\n",
    "    _, ax = plt.subplots()\n",
    "    plot(h_incorrect, p, ax, mv.limits, mv.p_true)\n",
    "    _, ax = plt.subplots()\n",
    "    plot(h, p, ax, mv.limits, mv.p_true)\n",
    "    ax.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
